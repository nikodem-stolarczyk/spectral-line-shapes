def weideman64(x,y):
    """    
    #-------------------------------------------------
    #      Computes the complex probability function using a rational series 
    #      with 64 terms. It is assumed that Im(z) > 0 or Im(z) = 0.
    #
    #      Input/Output Parameters of Routine
    #      --------------------------------- 
    #      x : Real part of input complex parameter
    #      y : Imaginary part of input complex parameter
    #
    #
    #      The function has one output:
    #      -----------------
    #      (1): Complex probability function
    #-------------------------------------------------
    """
    p = 0
    z = -y + x*1j
    L = 6.727171322029716
    Z = (L+z)/(L-z)
    a = [  0.000000000000000E+00, -2.220111670832252E-16, -2.273584798798234E-16, -2.258274388021202E-16,
           1.110223024625157E-16, -1.101873630780748E-16, -1.691039814921488E-16, -2.200014673754610E-16,
          -1.083148803702176E-16, -1.541789033295028E-16, -1.383619781691123E-16, -3.464209211480709E-17,
          -1.114709404332837E-16, -1.416741122148533E-16,  6.860568083516428E-18, -4.318968796024627E-17,
           4.589564221869409E-17, -8.283555420239010E-17, -2.780914217932556E-17, -4.505584589014999E-17,
           8.368898471245830E-17,  3.833989202881208E-16, -8.518878934610120E-16, -4.424560256524300E-15,
          -3.296230945894382E-16,  3.291775054575796E-14,  5.892319810025963E-14, -1.549357040996273E-13,
          -7.921106514156008E-13, -3.940120528672071E-13,  5.832693120762070E-12,  1.750157108645218E-11,
          -6.470633436423956E-12, -1.756060343202112E-10, -4.533914196727698E-10,  2.443479271131574E-10,
           5.186955927487748E-09,  1.592681400335112E-08,  7.435710941774552E-09, -1.361026123759828E-07,
          -6.650424119635022E-07, -1.554772278118425E-06, -7.564244106919271E-08,  1.790180158621805E-05, 
           1.022700679891085E-04,  3.962745103981140E-04,  1.254978804998220E-03,  3.460207948107555E-03,
           8.565381413175980E-03,  1.938039902453831E-02,  4.055284652958024E-02,  7.911655067602583E-02,
           1.447785997358642E-01,  2.496396999453557E-01,  4.070443030398736E-01,  6.293868343374367E-01, 
           9.249760252638090E-01,  1.294437751717516E+00,  1.727506085787117E+00,  2.201256571286410E+00,
           2.680732639559084E+00,  3.122448189402037E+00,  3.480496103985042E+00,  3.714169793197703E+00]
    for i in range(64): p+=a[i]*Z**(63 - i)
    return 2*p/(L-z)**2 + 0.5641895835477563/(L-z)

def hum1_w24(x,y):
	    """    
    #-------------------------------------------------
    #      Computes the complex probability function using Humlicek's algorithm
    #      in its first subregion 
    #	   (J. Humlicek, J. Quant. Spectr. Radiat. Transfer Vol. 27, No. 4, pp. 437-444 (1982))
    #	   and weideman24 algorithm in other subregions.
    #
    #      Input/Output Parameters of Routine
    #      --------------------------------- 
    #      x : Real part of input complex parameter
    #      y : Imaginary part of input complex parameter
    #
    #
    #      The function has one output:
    #      -----------------
    #      (1): Complex probability function
    #-------------------------------------------------
    """
    if abs(x)+y<15.0:
        t = y-x*1j
        return 0.5641895835477563*t/(0.5+t**2)
    else: return weideman24(x,y)

def weideman24(x,y):
    """    
    #-------------------------------------------------
    #      Computes the complex probability function using a rational series 
    #      with 24 terms. It is assumed that Im(z) > 0 or Im(z) = 0.
    #
    #      Input/Output Parameters of Routine
    #      --------------------------------- 
    #      x : Real part of input complex parameter
    #      y : Imaginary part of input complex parameter
    #
    #
    #      The function has one output:
    #      -----------------
    #      (1): Complex probability function
    #-------------------------------------------------
    """
    p = 0
    z = -y + x*1j
    L = 4.119534287814236
    Z = (L+z)/(L-z)
    a = [ -1.513747622620502E-10,  4.904820407381768E-09,  1.331045329581992E-09, -3.008282344381996E-08,
          -1.912225887484805E-08,  1.873834346505099E-07,  2.568264135399530E-07, -1.085647579417637E-06,
          -3.038893184366094E-06,  4.139461724429617E-06,  3.047106608295325E-05,  2.433141546207148E-05,
          -2.074843151143828E-04, -7.816642995626165E-04, -4.936426901286291E-04,  6.215006362949147E-03,
           3.372336685531603E-02,  1.083872348456673E-01,  2.654963959880772E-01,  5.361139535729116E-01,
           9.257087138588670E-01,  1.394819673379119E+00,  1.856286499205540E+00,  2.197858936531542E+00]
    for i in range(24): p+=a[i]*Z**(23 - i)
    return 2*p/(L-z)**2 + 0.5641895835477563/(L-z)
